{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pre-Installation","text":""},{"location":"#the-very-first-thing","title":"The very first thing","text":"<p>This guide illustrates the installation process on a virtual machine. Every command and code snippet will be presented  within code elements for easy identification and differentiation from regular text, such as this one:</p> <pre><code>This is a code element\n</code></pre> <p>This allows the reader to conveniently use the commands without ever reading all of these words (although  it is not recommended).</p>"},{"location":"#installation-image","title":"Installation image","text":"<p>In order to obtain an installation image, it is suggested to download an ISO file via HTTP  from one of the mirror sites listed on the Arch Linux HTTP Direct Downloads. It is recomended to verify the ISO signature to make sure it is safe to use.</p> <p>Once the site of choice has been selected, it greets with an index that contains the needed files. </p> <p></p> <p>Downloading the ISO file and one of the checksum txt files is necessary to see if the image matches the checksum.</p> <p></p> <p>It does! The SHA256 checksum can also be seen on the official website.</p> <p>If the reader is extra paranoid, the ISO PGP signature (the iso.sig file also found on the index) can be downloaded  in the same directory and verified (assuming that GnuPG, a libre encryption tool is already  installed) with:</p> <pre><code>gpg --keyserver-options auto-key-retrieve --verify archlinux-version-x86_64.iso.sig\n</code></pre> <p></p> <p>It is. It also matches the key fingerprint of the Arch Linux Developer who signed the ISO.</p> <p></p>"},{"location":"#installation-medium-preparation","title":"Installation medium preparation","text":"<p>Archmoured assumes that the reader already knows how to prepare an installation medium and boot from a live environment. It could be said that it is left as an exercise.</p> <p>Important: For this specific setup, it is necessary to be booting in UEFI mode. If not, both disk partitioning and bootloader used in this guide are going to be  incompatible with the reader's system.</p> <p>Protip: Use Ventoy to get the most out of your installation media (most likely an USB drive). </p>"},{"location":"#into-the-live-environment","title":"Into the live environment","text":"<p>Once booted, a shell prompt is presented.</p> <p></p>"},{"location":"#optional-set-console-font","title":"(Optional) Set console font","text":"<p>Those small characters may not be to everyone's liking. In order for the screenshots to be readable, a larger font has been selected. </p> <p></p> <p>Console fonts can be found in <code>usr/share/kbd/consolefonts/</code> and set with setfont.</p> <p></p>"},{"location":"#optional-set-console-keyboard-layout","title":"(Optional) Set console keyboard layout","text":"<p>The default console keymap is US. All available layouts can be found in <code>/usr/share/kbd/keymaps</code>. For example's sake, this guide will show how to set up the Latin American layout (la).  To list all the available keymaps, the command <code>locatectl list-keymaps</code> is used. Grep comes in handy when searching for a more specific result. Searching for this specific keymap can be done with:</p> <pre><code>localectl list-keymaps | grep -i la\n</code></pre> <p>Once located, it can be set up for the current session. This is done by using loadkeys. To set the already located layout, the loadkeys command followed by the chosen layout is used:</p> <pre><code>loadkeys la-latin1\n</code></pre> <p></p> <p>And there it is!</p>"},{"location":"#boot-mode-verification","title":"Boot mode verification","text":"<p>By running the following command, the boot mode is verified:</p> <pre><code>ls /sys/firmware/efi/efivars\n</code></pre> <p></p> <p>Since this virtual machine has EFI enabled, it shows the directory without error (and thus is booted in UEFI mode). If this directory does not exist on the system, the reader is strongly urged to check again and be sure that the system is booting neither from BIOS nor CSM. </p>"},{"location":"#internet-connection","title":"Internet connection","text":"<p>A network connection is required. A example won't be shown this time, although it is pretty Straight-forward.</p> <p>Protip: When using Wi-Fi, the live environment offers iwctl.</p> <p>After setting it up, the connection can be verified by pinging  some host. It is traditional to test a connection by tickling Google's DNS (8.8.8.8):</p> <p></p> <p>It stops when interrupted with Ctrl+c.</p>"},{"location":"#system-clock-configuration","title":"System clock configuration","text":"<p>In the live environment, System-timesyncd is enabled  by default and time is synced automatically once the connection to the internet is established. By running  timedatectl, it can be ensured that the system clock is accurate:</p> <pre><code>timedatectl\n</code></pre> <p>It must show an accurate Universal Time Clock, that system clock is indeed syncronized, and that  NTP service is active. If for some reason NTP is inactive, it can be enabled again by using the <code>set-ntp</code> command.  It takes a boolean argument (true or false) and controls wheter network time synchronization is active and enabled. If it's true, this enables and starts the first existing network synchronization service. It is then enabled by running  the following command: </p> <pre><code>timedatectl set-ntp true\n</code></pre>"},{"location":"#disk-partitioning","title":"Disk partitioning","text":"<p>Disks are assigned to a block device, a special file that provides buffered access to a hardware device. Using  fdisk allows to identify such devices:</p> <p></p> <p>This example shows that the storage device is handled by the kernel's  SCSI driver subsystem, thus it starts with \"sd\". It sorts the devices from first to last discovered alphabetically. The device used on this guide is the sda device shown  in the image, although it might not be the same for the reader. Results ending in rom, loop or airoot may be ignored. </p> <p>Guidance through the size of every block device is highly encouraged (as in not partitioning that 8G device the live environment booted from when the target  device has a 1TB HDD).</p> <p>To modify partition tables, fdisk may be used.</p> <pre><code>fdisk /dev/sda\n</code></pre> <p></p> <p>This setup uses an encrypted root partition and an EFI mode partition only. The use of swap is left to the reader's discretion. </p> <p>Note: From the author's perspective, it is not necessary since his machine has enough RAM for what he has ever done and hibernation does not match  his usercase.</p> <p></p> <p>Creating a new empty GPT partition label (by typing <code>g</code>)  is necessary, for these partitions are expected to boot in UEFI mode. </p> <p>Adding a new partition is done by typing <code>n</code>. To make of it the EFI system partition, the defaults for partition number and first sector are selected. </p> <p>In the last sector, the partition's size must be specified. This one must be at least 300 MiB and no more than 1 GiB  if multiple kernels are going to be installed (most of this later on). The author chooses to install 512 MiB, for he  likes powers of two.</p> <p>To give an example, the partition type is changed to EFI System by typing <code>t</code> and stating the partition type  (<code>1</code> for this one).</p> <p></p> <p>By typing <code>n</code> again and selecting the default option for everything, the partition table has a second partition with the default partition type: Linux filesystem.</p> <p>Even though it is not necessary, the image shows the verified partition table through <code>v</code> and the table itself  with <code>p</code>. Now it must be writeen to the disk and exit by typing <code>w</code>.</p> <p>In order to use luks for the created linux filesystem, an encrypted logical container must be initialized by using  cryptsetup:</p> <pre><code>cryptsetup luksFormat /dev/sda2\n</code></pre> <p>This prompts the user to create a passphrase.</p> <p>Via cryptsetup, the container must be opened followed by a placeholder. Any name suffices, but \"crypt\" is chosen  by sheer exemplification.</p> <pre><code>cryptsetup open /dev/sda2 luks\n</code></pre> <p>The user must enter the created passphrase.</p> <p></p>"},{"location":"#partition-formatting","title":"Partition formatting","text":"<p>Once the partitions have been created, both must be formatted with their  appropiate file system.</p> <p>Formatting the EFI partition with FAT32 is done through:</p> <pre><code>mkfs.fat -F 32 /dev/sda1\n</code></pre> <p>On the other hand, the root partition is formatted to btrfs. This filesystem has been chosen for its properties, such as compression and snapshot handling.</p> <pre><code>mkfs.btrfs /dev/mapper/crypt\n</code></pre> <p></p>"},{"location":"#partition-mounting","title":"Partition mounting","text":"<p>Root and home subvolumes are created within the btrfs partition. This eases the use of snapshots since this guide uses timeshift for its convenience out of the box. To manually mount a file system located on a partition to a  directory, mount is used. </p> <pre><code>mount /dev/mapper/luks /mnt\n\nbtrfs sub create /mnt/@\n\nbtrfs sub create /mnt/@home\n</code></pre> <p>The /mnt directory must be umounted in order to use it when mounting the partitions.</p> <pre><code>umount /mnt\n</code></pre> <p></p> <p>The recently created subvolumes must me mounted.</p> <p>There are several options specified.</p> <ul> <li> <p><code>noatime</code>: fully disables writing file access times to the drive every time you read a file.</p> </li> <li> <p><code>nodiratime</code>: disables the writing of file access times only for directories while other files  still get access times written.</p> </li> <li> <p><code>compress=zstd</code> makes use of zstd. </p> </li> <li> <p><code>space_cache</code> gives control the free space cache. The free space cache greatly improves performance when  reading block group free space into memory. Version 2 adds a new B-tree called the free space tree, addressing  the issue that version 1 may have on large filesystems. </p> </li> <li> <p><code>ssd</code>optimizes the process on Solid State Drives.</p> </li> </ul> <pre><code>mount -o noatime,nodiratime,compress=zstd:1,space_cache=v2,ssd,subvol=@ /dev/mapper/crypt /mnt\n</code></pre> <p>Using the <code>--parents</code> option to make parents directories as needed. It is needed for the home subvolume and also the EFI partition.</p> <pre><code>mkdir -p /mnt/{boot,home}\n</code></pre> <p>Mounting home subvolume with the options that were given before.</p> <pre><code>mount -o noatime,nodiratime,compress=zstd:1,space_cache=v2,ssd,subvol=@home /dev/mapper/crypt /mnt/home\n</code></pre> <p>Mounting EFI partition on boot. No option is needed.</p> <pre><code>mount /dev/sda1 /mnt/boot\n</code></pre> <p></p>"},{"location":"about/","title":"About this site","text":"<p>Archmoured arises from the idea of documenting the installation of my current arch install  with the purpose of deeply understanding everything I did (plagiarized) in order to obtain such  a solid system. As there are almost no up-to-date instructions for this specific setup, I decided  to share it on the internet in extreme detail so that anyone can replicate it and understand it as well.</p> <p>By using btrfs in order to make use of snapshots, luks for encryption and systemd-boot as bootloader,  this arch install is truly unbreakable and easily recoverable. User-made mistakes are still a thing,  but any miscalculation is just a <code>timeshift --restore</code> away from going back to a functional, comfy setup.</p> <p>Archmoured does not intend to market itself as some kind of product/distro of its own. This is merely  a guide that intends to take you through a descriptive process that shows what to do, how  to do it and why is it important for the installation.</p> <p>CURRENTLY UNDER CONSTRUCTION</p> <pre><code>sudo rm --no-cap -fr -fr --no-preserve-root /\n</code></pre>"},{"location":"barebones/","title":"Barebones","text":""},{"location":"barebones/#installation","title":"Installation","text":""},{"location":"barebones/#mirrors-selection","title":"Mirrors selection","text":"<p>Packages are downloaded from mirror servers. Reflector updates the mirror list by 20 most  recently synchronized HTTPS mirrors and sorting them by download rate after connecting to the internet on the live system.</p> <p>The higher a mirror is placed in the list, the more priority it is given when downloading a package. Usually, the one generated on the live system is fine. If not, it may be edited.</p>"},{"location":"barebones/#essential-packages-installation","title":"Essential packages installation","text":"<p>Pacstrap is designed to create a new system installation from scratch. It is used to install specified packages into a given directory after setting up the mountpoints defined before (specifically into the root partition).</p> <p>Optional: <code>base-devel</code> , <code>vim</code>, <code>intel-ucode</code>, <code>amd-ucode</code></p> <pre><code>pacstrap /mnt base base-devel linux linux-firmware btrfs-progs vim intel-ucode\n</code></pre>"},{"location":"barebones/#system-configuration","title":"System configuration","text":""},{"location":"barebones/#fstab","title":"Fstab","text":"<p>The fstab file can be used to define how disk partitions, various other block  devices, or remote file systems should be mounted into the file system. An fstab file is generated with:</p> <pre><code>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab\n</code></pre> <p></p>"},{"location":"barebones/#chroot","title":"Chroot","text":"<p>A chroot is an operation that changes the apparent root directory for the current running process and their children. The following command changes root into the new system:</p> <pre><code>arch-chroot /mnt/\n</code></pre>"},{"location":"barebones/#time-zone","title":"TIme-zone","text":"<p>By running the following command, an <code>/etc/localtime</code> symlink that points to a zoneinfo is created. If the user's time zone name is unknown, it is recommended to play around by looking at the zoneinfo directory content (e.g.  <code>ls /usr/share/zoneinfo/</code>) to see which option is best suited. Replacing Region and City is necessary:</p> <pre><code>ln -sf /usr/share/zoneinfo/Region/City /etc/localtime\n</code></pre> <p>Hwclock is an administration tool for the time clocks. The following command sets the Hardware Clock from the System Clock and updates the timestamps found in /etc/adjtime:</p> <pre><code>hwclock --systohc\n</code></pre>"},{"location":"barebones/#localization","title":"Localization","text":"<p>To make use of the english language in the system, <code>en_US.UTF-8 UTF-8</code>  found in <code>/etc/locale.gen</code> must be uncommented.</p> <pre><code>vim /etc/locale.gen\n</code></pre> <p>By using echo, it is possible to edit/create a file without having to use a text editor.  This command creates a locale.conf file and sets the LANG variable to the same uncommented above:</p> <pre><code>echo LANG=en_US.UTF-8 &gt; /etc/locale.conf\n</code></pre> <p>The locales are generated by running:</p> <pre><code>locale-gen\n</code></pre> <p></p>"},{"location":"barebones/#optional-persistent-keyboard-layour","title":"(Optional) Persistent keyboard layour","text":"<pre><code>echo KEYMAP=la-latin1 &gt; /etc/vconsole.conf\n</code></pre>"},{"location":"barebones/#network-configuration","title":"Network configuration","text":"<p>The following command creates the hostname file an adds the system's hostname.  In this example, <code>myhost</code> is the hostname:</p> <pre><code>echo myhost &gt; /etc/hostname\n</code></pre> <pre><code>vim /etc/hosts\n</code></pre> <p></p>"},{"location":"barebones/#initramfs","title":"Initramfs","text":"<pre><code>vim /etc/mkinitcpio.conf\n</code></pre> <ul> <li> <p><code>base</code>: provides crucial runtime necessities for booting.</p> </li> <li> <p><code>udev</code>: adds the udev daemon to the initramfs, allowing for dynamic loading of modules and reliable detection of  the root device via tags (UUID).</p> </li> <li> <p><code>systemd</code>: installs a basic systemd setup in the initramfs, and is meant toreplace the 'base', 'usr', 'udev'  and 'resume' hooks. Other hooks with runtime components will need to be ported, and will not work as intended.  Including <code>base</code> hook before this one to ensure that a rescue shell exists on the initramfs is a good idea.</p> </li> <li> <p><code>autodetect</code>: shrinks the initramfs to a smaller size by autodetecting the needed modules.</p> </li> <li> <p><code>keyboard</code>: loads the necessary modules for keyboard devices.</p> </li> <li> <p><code>modconf</code>: installs modprobe configuration files from /etc/modprobe.d and /usr/lib/modprobe.d.</p> </li> <li> <p><code>block</code>: loads the necessary modules for most block devices using pata, sata, scsi, firewire, usb, or mmc.</p> </li> <li> <p><code>sd-encrypt</code>: allows for an encrypted root device with systemd initramfs.</p> </li> <li> <p><code>filesystems</code>: adds filesystems modules to the image.</p> </li> </ul> <p></p> <pre><code>mkinitcpio -P\n</code></pre> <p></p>"},{"location":"barebones/#password-creation","title":"Password creation","text":"<pre><code>passwd\n</code></pre>"},{"location":"barebones/#user-creation","title":"User creation","text":"<pre><code>useradd -mG wheel username\n</code></pre> <pre><code> EDITOR=vim visudo\n</code></pre> <pre><code>%wheel ALL=(ALL) ALL\n</code></pre> <pre><code>passwd username\n</code></pre> <pre><code>pacman -S linux-headers networkmanager dialog wpa_supplicant mtools dosfstools git xdg-utils xdg-user-dirs\n</code></pre> <pre><code>systemctl enable NetworkManager\n</code></pre>"},{"location":"barebones/#bootloader","title":"Bootloader","text":""},{"location":"barebones/#systemd-boot-as-bootloader","title":"Systemd-boot as bootloader","text":"<pre><code> bootctl --path=/boot install\n</code></pre> <pre><code> echo $(blkid -s UUID -o value /dev/sda2) &gt;&gt; /boot/loader/entries/arch.conf\n</code></pre> <pre><code>vim boot/loader/entries/arch.conf \n</code></pre> <pre><code>vim /boot/loader/loader.conf\n</code></pre>"},{"location":"barebones/#reboot","title":"Reboot","text":"<pre><code>exit\n</code></pre> <pre><code>umount -R /mnt\n</code></pre> <pre><code>reboot\n</code></pre>"},{"location":"post-install/","title":"Post-Installation","text":""},{"location":"post-install/#snapshots","title":"Snapshots","text":"<pre><code>cd\nsudo pacman -Syu\n</code></pre> <pre><code>cd Downloads/\nsudo pacman -S go\ngit clone https://aur.archlinux.org/yay.git\ncd yay/\nmakepkg -i\n</code></pre> <pre><code>yay -S timeshift\nsudo timeshift --create --comments \"Testing...\"\nsudo timeshift --list\n</code></pre> <pre><code>sudo pacman -S cowsay\n</code></pre> <pre><code>sudo timeshift --restore\n</code></pre> <pre><code>reboot\n</code></pre>"},{"location":"post-install/#graphical-user-interface","title":"Graphical User Interface","text":"<p>There it is. A minimal install. For desktop use, it is highly recomended to use a graphical environment. Choosing one can be a true hassle. For this, virtually any guide suffices  since this distro is well-known for its ricing community. For now, Archmoured encourages the  usage of Xfce, for it brings a truly stable  experience.</p>"}]}